{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","HOC/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","props","path","id","className","s","dialog","active","to","activeClassName","name","Message","message","maxlength10","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","input","Dialogs","state","messagesPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageText","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,oBCA3DD,EAAOC,QAAU,CAAC,QAAU,2B,sHCiBbC,EATwB,SAACC,GACpC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAF,IAAiBD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAMO,gBAAiBJ,IAAEE,OAAtC,SAA+CN,EAAMS,U,kBCClDC,EANyB,SAACV,GACrC,OACI,qBAAKG,UAAWC,IAAEO,QAAlB,SAA4BX,EAAMW,W,yBCDpCC,EAAcC,YAAiB,IAmE/BC,EAAsBC,YAAiC,CACzDC,KAAM,wBADkBD,EAb+C,SAACf,GACxE,OAAO,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACP,8BACKC,YAAuC,2GAAuB,iBAAkBC,IAAU,CAACC,IAAUT,GAAc,WAAY,CAAET,UAAWC,IAAEkB,UAEnJ,8BACI,kDAWOC,EAlDsB,SAACvB,GAClC,IAAIwB,EAAOxB,EAAMyB,aAEbC,EAAkBF,EAAMG,QAC3BC,KAAK,SAAAC,GAAC,OAAK,cAAC,EAAD,CAAQpB,KAAMoB,EAAEpB,KAAiBP,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAGrC4B,EAAmBN,EAAMO,SAChCH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS9B,GAAK8B,EAAE9B,GAAeS,QAASqB,EAAErB,SAAjBqB,EAAE9B,OAOlC,OACI,sBAAKC,UAAWC,IAAEuB,QAAlB,UACI,qBAAKxB,UAAWC,IAAE6B,aAAlB,SACKP,IAIL,qBAAKvB,UAAWC,IAAE2B,SAAlB,SACI,gCACID,EACD,cAAChB,EAAD,CAAqBG,SAdhB,SAACiB,GACjBlC,EAAMmC,YAAYD,EAAOE,4B,6CCrC7BC,EAA6B,SAACb,GAAD,MAA0B,CACvDc,OAASd,EAAMe,KAAKD,SCOTE,sBACXC,aAPkB,SAACjB,GACnB,MAAO,CACHC,aAAeD,EAAMC,gBAKlB,eAAuBiB,ODC3B,SAA+BC,GAUlC,OAHqCF,YACjCJ,EAA4B,GADKI,EANsC,SAACzC,GACpE,IAAKsC,EAAwBtC,EAAxBsC,OAAWM,EAAhB,YAA6B5C,EAA7B,GACA,OAAKsC,EACE,cAACK,EAAD,eAAsBC,IADT,cAAC,IAAD,CAAUrC,GAAG,gBCL9BiC,CAGbjB","file":"static/js/3.89d96c64.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3E9u_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1LbYk\",\"active\":\"Dialog_active__2DiNB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3UEiC\"};","import { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.css'\r\nimport React from 'react'\r\n\r\ntype OwnPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst Dialog: React.FC<OwnPropsType> = (props) =>{\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ` ` + s.active}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import s from './Message.module.css'\r\nimport React from 'react'\r\n\r\ntype OnwPropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC<OnwPropsType> = (props) =>{\r\n    return(\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import s from './Dialogs.module.css'\r\nimport Dialog from './Dialog/Dialog'\r\nimport Message from './Message/Message'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Textarea } from '../Common/FormsControl/FormsControl';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport React from 'react';\r\nimport { InitialStateType } from '../../Redux/dialogs-reducer';\r\n\r\nconst maxlength10 = maxLengthCreator(10)\r\n\r\ntype PropsType = {\r\n    messagesPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport type AddNewMessageFormType = {\r\n    newMessageText: string\r\n}\r\ntype AddNewMessageFormTypeKeys = Extract< keyof AddNewMessageFormType, string>\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) =>{\r\n    let state= props.messagesPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n    .map( d =>  <Dialog name={d.name} key={d.id} id={d.id}/>);\r\n\r\n\r\n    let messagesElements = state.messages\r\n.map( m => <Message id= {m.id} key={m.id} message={m.message}/>)\r\n\r\n  \r\n    let addNewMessage = (values: AddNewMessageFormType) => {\r\n        props.sendMessage(values.newMessageText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n                \r\n                \r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                   {messagesElements}\r\n                   <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div> \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddNewMessageFormType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n    <div> \r\n        {createField<AddNewMessageFormTypeKeys>(\"только начни писать\", \"newMessageText\", Textarea, [required, maxlength10], \"userName\", { className: s.input })}\r\n    </div>\r\n    <div>\r\n        <button>\r\n            send\r\n        </button>\r\n    </div>\r\n</form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<AddNewMessageFormType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import  React, {Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../Redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth : state.auth.isAuth,\r\n})\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n\r\n}\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>)  {\r\n    const RedirectComponent: React.FC<DispatchPropsType & MapStatePropsType> = (props) => {\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to=\"/login\" />\r\n            return <WrappedComponent {...restProps as WCP} />  \r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, DispatchPropsType,WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {}) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import { actions } from '../../Redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect'\r\nimport { AppStateType } from '../../Redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) =>{\r\n    return {\r\n        messagesPage : state.messagesPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect (mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}