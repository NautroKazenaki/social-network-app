{"version":3,"sources":["components/Header/Header.module.css","api/profile-api.ts","Redux/profile-reducer.ts","Redux/dialogs-reducer.ts","assets/images/user.png.png","api/api.ts","components/Users/Users.module.css","components/Nav/Nav.module.css","components/Common/FormsControl/FormsControl.tsx","reportWebVitals.js","api/users-api.ts","utils/object-helpers.ts","Redux/users-reducer.ts","api/auth-api.ts","api/security-api.ts","Redux/auth-reducer.ts","Redux/app-reducer.ts","Redux/redux-store.ts","components/Nav/Nav.tsx","components/Settings/Settings.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSeachForm.tsx","Redux/users-selectors.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","HOC/withSuspence.tsx","App.tsx","index.tsx","components/Common/FormsControl/FormsControl.module.css","utils/validators/validators.ts","components/Login/Login.module.css","assets/images/preloader2.svg.gif","components/Common/Preloader/Preloader.tsx","components/Common/Paginator/Paginator.module.css"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likes","newPostText","actions","addPostActionCreator","type","setUserProfile","setUserStatus","deletePost","savePhotoSuccess","photos","getUserProfile","dispatch","a","response","getUserStatus","updateStatus","resultCode","savePhoto","file","saveProfileChanges","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageText","dialogsReducer","newMessage","ResultCodeEnum","axios","create","withCredentials","baseURL","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","component","validators","text","validate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","map","i","users","totalUsersCount","page","isFetching","followingInProgress","payload","count","requestUsers","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","messagesPage","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","_store_","Nav","nav","item","active","to","activeClassName","Settings","News","Music","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","cn","selectedPage","pageNumber","e","User","user","src","small","userPhoto","userAvatar","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","initialValues","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","getPageSize","getTotalUsersCount","getPage","getIsFetching","getFollowingInProgress","getUsersFilter","createSelector","u","Users","useSelector","useDispatch","useEffect","_follow","bind","_unfollow","UsersPage","pageTitle","Preloader","Header","header","loginBlock","logout","HeaderContainer","this","Component","connect","maxLength32","maxLengthCreator","LoginReduxForm","reduxForm","handleSubmit","required","checkbox","s2","formSummaryError","button","Login","loginData","CaptchaIsRequired","length","withSuspence","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","from","path","render","AppContainer","withRouter","promise","all","MainApp","basename","process","ReactDOM","document","getElementById","maxLength","preloader","style","backgroundColor"],"mappings":"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","file":"static/js/main.6aaffb66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Qiwx\",\"loginBlock\":\"Header_loginBlock__11EkC\"};","import { instance, APIResponseType } from './api';\r\nimport { ProfileType, PhotosType } from './../types/types';\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status : status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile:any) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<PhotosType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfileChanges(profile:ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import { ThunkType } from './auth-reducer';\r\nimport {  InferActionsTypes } from './redux-store';\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { profileAPI  } from \"../api/profile-api\";\r\nimport { PhotosType, PostType, ProfileType } from \"../types/types\";\r\n\r\nexport type InitialStateType = typeof initialState\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"А не всё это\", likes: 50 },\r\n        { id: 2, message: \"Щас бы в доту\", likes: 0 },\r\n    ] as Array<PostType>,\r\n    newPostText: '@Nautro_Kazenaki',\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n\r\n};\r\n\r\nconst profileReducer = (state = initialState, action:ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\":\r\n\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likes: 1,\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        case \"SN/PROFILE/DELETE-POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.id)\r\n            }\r\n        case \"SN/PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SN/PROFILE/SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"SN/PROFILE/SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText:string)=> {\r\n        return {\r\n            type: \"SN/PROFILE/ADD-POST\",\r\n            newPostText\r\n        } as const\r\n    },\r\n    setUserProfile: (profile:ProfileType) => {\r\n        return {\r\n            type: \"SN/PROFILE/SET-USER-PROFILE\",\r\n            profile\r\n        } as const\r\n    },\r\n   \r\n    setUserStatus: (status:string)=> {\r\n        return {\r\n            type: \"SN/PROFILE/SET-STATUS\",\r\n            status\r\n        } as const\r\n    },\r\n    deletePost: (id:number) => {\r\n        return {\r\n            type: \"SN/PROFILE/DELETE-POST\",\r\n            id\r\n        } as const\r\n    },\r\n    savePhotoSuccess:  (photos:PhotosType)=> {\r\n        return {\r\n            type: \"SN/PROFILE/SAVE-PHOTO-SUCCESS\",\r\n            photos\r\n        } as const\r\n    },\r\n}\r\n\r\nexport const getUserProfile = (userId:number):ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getProfile(userId)\r\n\r\n    dispatch(actions.setUserProfile(response))\r\n    \r\n}\r\n\r\nexport const getUserStatus = (userId:number): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n\r\n    dispatch(actions.setUserStatus(response))\r\n\r\n}\r\nexport const updateStatus = (status:string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actions.setUserStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file:File): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(response.data))\r\n    }\r\n}\r\nexport const saveProfileChanges = (profile:ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id\r\n    const response = await profileAPI.saveProfileChanges(profile)\r\n\r\n    if (response.resultCode === 0) {\r\n        if(userId !=null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.messages[0]}))\r\n        return Promise.reject(response.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import { InferActionsTypes } from './redux-store';\r\n\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet initialState = {\r\n    messages: [\r\n        { id: 1, message: \"воняешь\" },\r\n        { id: 2, message: \"приветствую вас, чемпион людей, чемпион зверей!\" },\r\n        { id: 3, message: \"горы\" },\r\n        { id: 4, message: \"завтра выйди в полную смену\" },\r\n    ] as Array<MessageType>,\r\n    dialogs: [\r\n        { id: 1, name: \"Ульяна\" },\r\n        { id: 2, name: \"Максим\" },\r\n        { id: 3, name: \"Агнесса\" },\r\n        { id: 4, name: \"Вонючая работа\" },\r\n    ]as Array<DialogType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nexport const actions = {\r\n   sendMessage: (newMessageText:string) => {\r\n        return {\r\n            type: \"SN/DIALOGS/SEND-MESSAGE\",\r\n            newMessageText\r\n        } as const\r\n    }\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action:ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case \"SN/DIALOGS/SEND-MESSAGE\":\r\n\r\n\r\n            let newMessage = {\r\n                id: 5,\r\n                message: action.newMessageText,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user.png.418d999c.png\";","import axios from 'axios'\r\nimport { UserType } from '../Redux/users-reducer';\r\n\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"9a4a446d-7134-4fbe-a5f0-1c43675f5d88\"\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userAvatar\":\"Users_userAvatar__2et_4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__1QKPq\",\"item\":\"Nav_item__1VkpD\",\"active\":\"Nav_active__24Ity\"};","\r\nimport React from 'react'\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\nimport s from './FormsControl.module.css'\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nconst FormControl:React.FC<FormControlPropsType> = ({ meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '') }>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea:React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta,   ...restProps} = props;\r\n\r\n    return (\r\n       <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n    )\r\n}\r\nexport const Input:React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta,  ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n       \r\n    )\r\n}\r\n\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined, \r\n    name: FormKeysType, \r\n    component: React.FC<WrappedFieldProps>, \r\n    validators: Array<FieldValidatorType>, \r\n    type?:string, \r\n    props={} , \r\n    text=\"\") {\r\n        return<div> \r\n        <Field className={s.input}  placeholder={placeholder} name={name} component={component} validate={validators} type={type} {...props}/> \r\n        <h4>{text}</h4>\r\n        </div>\r\n    }\r\n      \r\nexport type GetStringKeys<T> = Extract< keyof T, string>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { AxiosPromise } from 'axios';\r\nimport { FilterType } from '../Redux/users-reducer';\r\nimport { GetItemsType, instance, APIResponseType } from './api';\r\nimport {profileAPI } from \"./profile-api\"\r\n\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term:string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n       return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n}","export const updateObjectInArray = (items:any, itemId:any, objPropName:any, newObjProps:any) =>{\r\n    return items.map((i:any) => {\r\n        if (i[objPropName] === itemId) {\r\n            return { ...i, ...newObjProps }\r\n        }\r\n        return i;\r\n    \r\n    })\r\n}  ","import { APIResponseType } from './../api/api';\r\nimport { AppStateType, InferActionsTypes, BaseThunkType } from './redux-store';\r\nimport { PhotosType } from '../types/types';\r\nimport { usersAPI } from \"../api/users-api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\"\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport type UserType = { \r\n    id: number\r\n    name: string    \r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    page: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, //array of users id\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n\r\n};\r\n\r\nconst usersReducer = (state = initialState, action:ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\",{followed: true} )\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: true }\r\n                //     }\r\n                //     return u;\r\n\r\n                // })\r\n\r\n            }\r\n\r\n        case \"SN/USERS/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\",{followed: false} )\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {\r\n                ...state, users: action.users \r\n            } \r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {\r\n                ...state, page: action.page\r\n            }\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {\r\n                ...state, filter: action.payload\r\n            }\r\n        }\r\n        case 'SN/USERS/SET_USERS_TOTAL_COUNT': {\r\n            return {\r\n                ...state, totalUsersCount: action.count\r\n            }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n        case 'SN/USERS/TOGGLE_FOLLOWING_IN_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    followSuccess: (userId:number) => {\r\n        return {\r\n            type: 'SN/USERS/FOLLOW',\r\n            userId\r\n        } as const\r\n    } ,\r\n    \r\n    unfollowSuccess: (userId:number) => {\r\n        return {\r\n            type: 'SN/USERS/UNFOLLOW',\r\n            userId\r\n        } as const\r\n    },\r\n    \r\n    setUsers: (users:Array<UserType>) => {\r\n        return {\r\n            type: 'SN/USERS/SET_USERS',\r\n            users\r\n        } as const\r\n    },\r\n    \r\n    setCurrentPage: (page:number) => {\r\n        return {\r\n            type: 'SN/USERS/SET_CURRENT_PAGE',\r\n            page\r\n        } as const\r\n    },\r\n    setFilter: (filter: FilterType) => {\r\n        return {\r\n            type: 'SN/USERS/SET_FILTER',\r\n            payload: filter\r\n        } as const\r\n    },\r\n    \r\n    setUsersTotalCount: (totalUsersCount:number) => {\r\n        return {\r\n            type: 'SN/USERS/SET_USERS_TOTAL_COUNT',\r\n            count: totalUsersCount\r\n        } as const\r\n    },\r\n    \r\n    toggleIsFetching: (isFetching:boolean) => {\r\n        return {\r\n            type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n            isFetching\r\n        }as const\r\n    },\r\n    \r\n    toggleFollowingInProgress: (isFetching:boolean, userId:number) => {\r\n        return {\r\n            type: 'SN/USERS/TOGGLE_FOLLOWING_IN_PROGRESS',\r\n            isFetching, userId,\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const requestUsers = (page:number, pageSize:number, filter: FilterType): ThunkType => {\r\n    return async (dispatch:DispatchType, getState: GetStateType) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersTotalCount(data.totalCount));\r\n\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch:DispatchType, userId:number, \r\n    apiMethod:( userId: number) => Promise<APIResponseType>, \r\n    actionCreator:(userId:number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingInProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingInProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId:number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId:number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import { instance, APIResponseType } from './api';\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId:number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email:string, password:string, rememberMe = false, captcha:null | string = null ) {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe, captcha}).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import { instance } from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import { InferActionsTypes, BaseThunkType } from './redux-store';\r\n\r\nimport { Action, AnyAction } from \"redux\";\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport {  ResultCodeEnum} from \"../api/api\";\r\nimport {authAPI} from \"../api/auth-api\"\r\nimport {securityAPI } from \"../api/security-api\"\r\n\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null,\r\n    login: string | null,\r\n    isFetching: boolean \r\n    isAuth: boolean,\r\n    captchaUrl:string | null, \r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaUrl: null, //if null, then captcha is not required\r\n\r\n};\r\n\r\nconst authReducer = (state = initialState, action:ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/AUTH/SET-USER-DATA\":\r\n        case \"SN/AUTH/GET-CAPTCHA-URL-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                // isAuth: true\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nexport type ThunkType = BaseThunkType<ActionsType | FormAction>\r\nconst actions = {\r\n    setAuthUserData: (id:number | null, email:string | null, login:string | null, isAuth:boolean) => {\r\n        return {\r\n            type: \"SN/AUTH/SET-USER-DATA\",\r\n            payload: {id, email, login, isAuth} \r\n        } as const\r\n    },\r\n    \r\n    getCaptchaUrlSuccess: (captchaUrl:string) => {\r\n        return {\r\n            type: \"SN/AUTH/GET-CAPTCHA-URL-SUCCESS\",\r\n            payload: {\r\n                captchaUrl\r\n            } as const\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let { id, email, login } = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email:string, password:string, rememberMe:boolean, captcha: string | null): ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        //success get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if(loginData.resultCode === ResultCodeEnum.CaptchaIsRequired){\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', { _error: message }))\r\n    }\r\n}\r\n\r\n\r\nexport const logout = ():ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.url \r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer;","import {  InferActionsTypes } from './redux-store';\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => {\r\n        return {\r\n            type: \"SN/APP/INITIALIZED-SUCCESS\",\r\n        } as const\r\n    }\r\n}\r\n\r\nexport const initializeApp = () => (dispatch:any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\n\r\nexport default appReducer;","import {createStore, combineReducers, applyMiddleware, compose, Action} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleWare, { ThunkAction } from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args:any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet rootReducer = combineReducers({\r\n     profilePage: profileReducer,\r\n     messagesPage: dialogsReducer,\r\n     usersPage: usersReducer,\r\n     auth: authReducer,\r\n     form: formReducer,\r\n     app: appReducer,\r\n})\r\n// @ts-ignore\r\n const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n const store = createStore(rootReducer,  composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\n\r\n// const { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\n\r\n\r\n\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleWare));\r\n// @ts-ignore\r\nwindow._store_ = store;\r\n\r\nexport default store;","import { NavLink } from 'react-router-dom';\r\nimport s from './Nav.module.css'\r\nimport React from 'react'\r\nconst Nav: React.FC = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`} >\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}> News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\nexport default Nav;\r\n","const Settings = () =>{\r\n    return(\r\n        <div>\r\n            настройки\r\n        </div>\r\n    )\r\n};\r\nexport default Settings;","const News = () =>{\r\n    return(\r\n        <div>\r\n            новости\r\n        </div>\r\n    )\r\n};\r\nexport default News;","const Music = () =>{\r\n    return(\r\n        <div>\r\n            музыка\r\n        </div>\r\n    )\r\n};\r\nexport default Music;","import React, { useState } from 'react'\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number, \r\n    pageSize: number, \r\n    page?:number, \r\n    onPageChanged?: (pageNumber: number) => void, \r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({ totalItemsCount, pageSize, page = 1, onPageChanged = x => x, portionSize = 10 }) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}> PREV </button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [s.selectedPage]: page === p\r\n                    },\r\n                        s.pageNumber)}\r\n                        key={p}\r\n                        onClick={(e) => {\r\n                            onPageChanged(p)\r\n                        }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n                <button onClick={() => { setPortionNumber(portionNumber + 1) }}> NEXT </button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n\r\n","import React from 'react'\r\nimport s from './Users.module.css'\r\nimport userPhoto from './../../assets/images/user.png.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../Redux/users-reducer'\r\n\r\ntype OwnPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId:number) => void\r\n    unfollow: (userId:number) => void\r\n}\r\n\r\nconst User:React.FC<OwnPropsType> = ({ user, followingInProgress, unfollow, follow}) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div >\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto} className={s.userAvatar} />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress\r\n                            .some(id => id === user.id)}\r\n                            onClick={() => {unfollow(user.id) }}> Unfollow </button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => {follow(user.id) }}> Follow </button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>\r\n                        {user.name}\r\n                    </div>\r\n                    <div>\r\n                        {user.status}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <div>\r\n                        {\"user.location.country\"}\r\n                        {\"user.location.city\"}\r\n                    </div>\r\n                </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\n\r\n\r\n\r\nexport default User","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react'\r\nimport { FilterType } from '../../Redux/users-reducer';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype OwnPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\n\r\n\r\nexport const UsersSearchForm: React.FC<OwnPropsType> = React.memo((props) => {\r\n\r\n    const submit = (values: FilterType, { setSubmitting }: { setSubmitting: (isSumbitting: boolean) => void }) => {\r\n        props.onFilterChanged(values)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ term: '', friend: null }}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">all</option>\r\n                            <option value=\"true\">only friend</option>\r\n                            <option value=\"false\">non friendo</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n           </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import { AppStateType } from './redux-store';\r\nimport { createSelector } from \"reselect\";\r\n\r\n\r\nconst getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getPage = (state:AppStateType) => {\r\n    return state.usersPage.page;\r\n}\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state:AppStateType) => {\r\n    return state.usersPage.filter;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })","import React, { useEffect } from 'react'\r\nimport Paginator from '../Common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {FilterType, requestUsers, follow, unfollow} from './../../Redux/users-reducer'\r\nimport { UsersSearchForm } from './UsersSeachForm'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getPage, getPageSize, getTotalUsersCount, getUsersFilter, getUsers, getFollowingInProgress } from '../../Redux/users-selectors'\r\n\r\ntype PropsType = { \r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalItemsCount = useSelector(getTotalUsersCount)\r\n    const page = useSelector(getPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(requestUsers(page, pageSize, filter));\r\n    }, [])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const _follow = (userId:number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const _unfollow = (userId:number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged = {onFilterChanged} />\r\n            <Paginator page={page} onPageChanged={onPageChanged} totalItemsCount={totalItemsCount} pageSize={pageSize} />\r\n            <div>\r\n                {\r\n                    users.map(u => <User\r\n                        user={u}\r\n                        key={u.id}\r\n                        followingInProgress={followingInProgress}\r\n                        unfollow={_unfollow}\r\n                        follow={_follow} />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {  useSelector } from 'react-redux';\r\nimport {Users} from './Users'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport {  getIsFetching,  } from '../../Redux/users-selectors';\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader /> : null}\r\n        <Users />\r\n    </>\r\n}\r\n\r\n// class UsersContainer extends React.Component<PropsType> {\r\n\r\n//     componentDidMount() {\r\n//         let { page, pageSize, filter } = this.props\r\n//         this.props.requestUsers(page, pageSize, filter);\r\n//     }\r\n\r\n//     // onPageChanged = (pageNumber: number) => {\r\n//     //     let { pageSize, filter } = this.props\r\n//     //     this.props.requestUsers(pageNumber, pageSize, filter);\r\n//     // }\r\n\r\n//     // onFilterChanged = (filter: FilterType) => {\r\n//     //     let { pageSize, } = this.props\r\n\r\n//     //     this.props.requestUsers(1, pageSize, filter)\r\n//     // }\r\n\r\n//     render() {\r\n//         return <>\r\n//             <h2>{this.props.pageTitle}</h2>\r\n//             {this.props.isFetching ? <Preloader /> : null}\r\n//             <Users\r\n//                 // totalItemsCount={this.props.totalItemsCount}\r\n//                 // pageSize={this.props.pageSize}\r\n//                 // page={this.props.page}\r\n//                 // onPageChanged={this.onPageChanged}\r\n//                 // onFilterChanged={this.onFilterChanged}\r\n//                 // users={this.props.users}\r\n//                 follow={this.props.follow}\r\n//                 unfollow={this.props.unfollow}\r\n//                 // followingInProgress={this.props.followingInProgress}\r\n//             />\r\n//         </>\r\n//     }\r\n// }\r\n\r\n// let mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n//     return {\r\n//         users: getUsers(state),\r\n//         pageSize: getPageSize(state),\r\n//         totalItemsCount: getTotalUsersCount(state),\r\n//         page: getPage(state),\r\n//         isFetching: getIsFetching(state),\r\n//         followingInProgress: getFollowingInProgress(state),\r\n//         filter: getUsersFilter(state)\r\n//     }\r\n// }\r\n\r\n// export default compose(\r\n//     connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n//         mapStateToProps, { follow, unfollow, requestUsers }),\r\n//     //withAuthRedirect,\r\n// )(UsersContainer)\r\n\r\n//toggleFollowingInProgress - если что, запихнуть в connect","import { NavLink } from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport React from 'react'\r\n\r\nexport type MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    \r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapStatePropsType & MapDispatchPropsType > = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='http://www.demo.crosstechno.com/assets/Uploads/_resampled/SetHeight77-Your-Logo.png' />\r\n\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth \r\n                    ? <div> {props.login} - <button onClick={props.logout}>log out</button></div>\r\n                    : <NavLink to={'/login'}>\r\n                    Login\r\n                </NavLink>}\r\n            </div>\r\n        </header >\r\n    )\r\n}\r\nexport default Header;","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Header from './Header';\r\nimport {logout} from '../../Redux/auth-reducer'\r\nimport { AppStateType } from '../../Redux/redux-store';\r\nimport {MapStatePropsType, MapDispatchPropsType} from './Header'\r\n\r\n\r\nclass HeaderContainer extends React.Component<MapStatePropsType& MapDispatchPropsType>{\r\n\r\n        render() {\r\n            return <Header {...this.props} />\r\n        }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) =>{\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {},AppStateType>(mapStateToProps, {logout}) (HeaderContainer);","import React from 'react'\r\nimport s from './Login.module.css'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\nimport { createField, GetStringKeys, Input} from '../Common/FormsControl/FormsControl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login } from '../../Redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport s2 from './../Common/FormsControl/FormsControl.module.css'\r\nimport { AppStateType } from '../../Redux/redux-store'\r\n\r\nconst maxLength32 = maxLengthCreator(32)\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps > & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div>\r\n            {createField<LoginFormValuesTypeKeys>(\"email\", \"email\", Input, [required, maxLength32], \"userName\", { className: s.input })}\r\n            {createField<LoginFormValuesTypeKeys>(\"password\", \"password\", Input, [required, maxLength32], \"password\", { className: s.input },)}\r\n            {createField<LoginFormValuesTypeKeys>(\"\", \"rememberMe\", Input, [], \"checkbox\", { className: s.checkbox }, \"remember me\")}\r\n        </div>\r\n        { captchaUrl && <img src={captchaUrl} />}\r\n        { captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", Input, [required])}\r\n        {error && <div className={s2.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button className={s.button}> Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\nexport type LoginFormValuesType = {\r\n    email:string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string| null\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const Login: React.FC = (props) => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    const onSubmit = (formData: any) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return <div>\r\n        <h1> login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n","import  React from \"react\";\r\nimport Preloader from \"../components/Common/Preloader/Preloader\";\r\n\r\n\r\n\r\nexport function withSuspence<WCP> (WrappedComponent: React.ComponentType<WCP>){\r\n    return (props: WCP) => {\r\n       return <React.Suspense fallback={<Preloader />}>\r\n                <WrappedComponent {...props} />\r\n            </React.Suspense>\r\n    }\r\n}","import React, { ComponentType } from 'react'\nimport store, { AppStateType } from './Redux/redux-store'\nimport Nav from './components/Nav/Nav'\nimport './App.css';\nimport { Route, withRouter, BrowserRouter, Switch, Redirect } from 'react-router-dom'\n\n\n\nimport Settings from './components/Settings/Settings';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\n\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport {UsersPage} from './components/Users/UsersContainer';\n//import ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport {Login} from './components/Login/Login';\nimport { Component } from 'react';\nimport { connect, Provider } from 'react-redux';\nimport { initializeApp } from './Redux/app-reducer';\nimport { compose } from 'redux';\nimport { withSuspence } from './HOC/withSuspence';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspence(DialogsContainer)\nconst SuspendedProfile = withSuspence(ProfileContainer)\n\nclass App extends Component<MapStatePropsType & DispatchPropsType> {\n\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) =>{\n    alert(\"Some error occured\")\n  }\n\n  componentDidMount() {\n    this.props.initializeApp()\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n  }\n\n  render() {\n    // if (!this.props.initialized) {\n    //   return <Preloader />\n    // }\n\n    return (\n      <div className='app-wrapper'>\n        <HeaderContainer />\n        <Nav />\n        <Switch>\n        <div className='app-wrapper-content'>\n\n          <Redirect from=\"/\" to=\"/profile\" />\n\n          <Route path='/profile/:userId?' render= {() =><SuspendedProfile />} />\n\n          <Route path='/dialogs' render={() => <SuspendedDialogs /> } />\n            \n          <Route path='/news' render={() => <News />} />\n\n          <Route path='/music' render={() => <Music />} />\n\n          <Route path='/settings' render={() => <Settings />} />\n\n          <Route path='/users' render={() => <UsersPage pageTitle={\"пользователи\"}/>} />\n\n          <Route path='/login' render={() => <Login />} />\n\n          {/* <Route path='*' render={() => <div> 404 not found </div>} /> */}\n        \n\n        </div>\n        </Switch>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n})\n\n// export default compose(\n//   withRouter,\n//   connect(mapStateToProps, {initializeApp})) (App);\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n\nconst MainApp: React.FC = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp;","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n    ReactDOM.render(<MainApp />, document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__1M8Ek\",\"error\":\"FormsControl_error__38lsR\",\"formSummaryError\":\"FormsControl_formSummaryError__sMkF_\"};","export type FieldValidatorType = (value:string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value)  => {\r\n    if (value) return undefined;\r\n\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number):FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Login_input__3lzMX\",\"checkboxWrapper\":\"Login_checkboxWrapper__1obbr\",\"checkbox\":\"Login_checkbox__1a8mz\",\"button\":\"Login_button__CHBy6\"};","export default __webpack_public_path__ + \"static/media/preloader2.svg.4963b81d.gif\";","import React from 'react'\r\nimport preloader from '../../../assets/images/preloader2.svg.gif'\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} style={{ backgroundColor: 'white' }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2AUjt\",\"selectedPage\":\"Paginator_selectedPage__3IVJb\",\"pageNumber\":\"Paginator_pageNumber__11vWv\"};"],"sourceRoot":""}