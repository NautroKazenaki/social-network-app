{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My posts/Post/Post.module.css","components/Profile/My posts/Posts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/My posts/Post/Post.tsx","components/Profile/My posts/Posts.tsx","components/Profile/My posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","formSummaryError","createField","Input","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","activateEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","ProfileInfo","savePhoto","saveProfileChanges","Preloader","avatarAndDescription","src","photos","large","userPhoto","mainPhoto","type","target","files","length","initialValues","formData","then","Post","post","message","likes","maxLength10","maxLengthCreator","Posts","postsElements","posts","p","id","NewPostReduxForm","values","addPost","newPostText","PostsMemorized","React","memo","required","input","PostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.865f3b1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarAndDescription\":\"ProfileInfo_avatarAndDescription__3_rdh\",\"mainPhoto\":\"ProfileInfo_mainPhoto__23ZjC\",\"contact\":\"ProfileInfo_contact__1uHO_\",\"formSummaryError\":\"ProfileInfo_formSummaryError__eItjX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3Qqu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__1t8R1\"};","import React, { ChangeEvent, useEffect, useState } from 'react'\r\n\r\ntype OwnPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<OwnPropsType> = (props) => {\r\n\r\n    \r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n    \r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b>\r\n                    <span onDoubleClick={activateEditMode} >\r\n                        {props.status || '-----'}\r\n                    </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import s from './ProfileInfo.module.css'\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { createField, GetStringKeys, Input, Textarea } from \"../../Common/FormsControl/FormsControl\"\r\nimport { ProfileType } from '../../../types/types'\r\nimport React from 'react'\r\n\r\ntype OwnPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, OwnPropsType > & OwnPropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>\r\n                    save\r\n                </button>\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>FullName:</b> {createField<ProfileTypeKeys>(\"FullName\", \"fullName\", Input, [],)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", Input, [], \"checkbox\")}\r\n            </div>\r\n            <div>\r\n                <b>My hardskills:</b> {createField<ProfileTypeKeys>(\"\", \"lookingForAJobDescription\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {createField<ProfileTypeKeys>(\"\", \"aboutMe\", Textarea, [])}\r\n            </div>\r\n            { <div>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contact}> \r\n                        <b>{key}:</b> {createField(key, \"contacts.\" + key, Input, [],)} \r\n                    </div>\r\n                })}\r\n            </div> }\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, OwnPropsType>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from './../../../assets/images/user.png.png'\r\nimport { ChangeEvent, useState } from 'react';\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport React from 'react';\r\n\r\ntype OwnPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file:File) => void\r\n    saveProfileChanges: (saveProfile:ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<OwnPropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfileChanges }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData:ProfileType) =>{\r\n        saveProfileChanges(formData)\r\n        .then(() =>{\r\n            setEditMode(false)  \r\n        })\r\n            \r\n    }\r\n    return (\r\n        <div className={s.avatarAndDescription}>\r\n            <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n            {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n            {editMode ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData profile={profile} isOwner={isOwner} activateEditMode={() => {setEditMode(true)}}/>}\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, activateEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n                <div>\r\n                    <button onClick={activateEditMode}>\r\n                        Edit\r\n                    </button>\r\n                </div>}\r\n            <div>\r\n                <b>FullName:</b>{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>{profile.lookingForAJob ? \" yes\" : \" no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My hardskills:</b>{profile.lookingForAJobDescription}\r\n                </div>}\r\n            <div>\r\n                <b>About me:</b>{profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>{Object\r\n                .keys(profile.contacts)\r\n                .map(key => {\r\n                    return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import s from './Post.module.css'\r\nimport React from 'react'\r\n\r\ntype OwnPropsType = {\r\n    message: string\r\n    likes: number\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<OwnPropsType> = (props) =>{\r\n    return (\r\n        <div className={s.post}>\r\n            \r\n            <img src='https://sun9-68.userapi.com/impf/c851132/v851132376/1188a1/2LuEdvm-8sQ.jpg?size=1720x2160&quality=96&sign=2cd993cfc5b64e41790739f26db3a77f&type=album' />\r\n             {props.message}\r\n            <div>\r\n                <button> \r\n                    {props.likes} likes\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","import Post from './Post/Post'\r\nimport s from './Posts.module.css'\r\nimport React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport {required, maxLengthCreator} from '../../../utils/validators/validators'\r\nimport { createField, GetStringKeys, Textarea } from '../../Common/FormsControl/FormsControl';\r\nimport { PostType } from '../../../types/types';\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nconst Posts:React.FC<MapStatePropsType & MapDispatchPropsType > = props => {\r\n\r\n    let postsElements = props.posts\r\n        .map(p => <Post key={p.id} id={p.id} message={p.message} likes={p.likes} />)\r\n\r\n    let addNewPost = (values: NewPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n            <h3>my posts </h3>\r\n            <NewPostReduxForm onSubmit={addNewPost} />\r\n            {postsElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst PostsMemorized = React.memo(Posts)\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\nexport type NewPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype NewPostFormValuesTypeKeys = GetStringKeys<NewPostFormValuesType>\r\n\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<NewPostFormValuesType, OwnPropsType > & OwnPropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            {createField<NewPostFormValuesTypeKeys>(\"start to write a new post\", \"newPostText\", Textarea, [required, maxLength10], \"\", { className: s.input })}\r\n        </div>\r\n\r\n        <div>\r\n            <button >Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst NewPostReduxForm = reduxForm<NewPostFormValuesType, OwnPropsType>({\r\n    form: \"profileNewPostForm\"\r\n})(NewPostForm)\r\nexport default PostsMemorized;","import { connect } from 'react-redux';\r\nimport { actions  } from '../../../Redux/profile-reducer'\r\nimport { AppStateType } from '../../../Redux/redux-store';\r\nimport Posts, { MapDispatchPropsType, MapStatePropsType } from './Posts'\r\n\r\nlet mapStateToProps = (state: AppStateType) =>{\r\n    return {\r\n        newPostText : state.profilePage.newPostText,\r\n        posts : state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst PostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost:actions.addPostActionCreator }) (Posts);\r\n\r\nexport default PostsContainer;","import ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport React from 'react'\r\nimport PostsContainer from './My posts/PostsContainer'\r\nimport Preloader from '../Common/Preloader/Preloader'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype OwnPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file:File) => void\r\n    saveProfileChanges: (saveProfile:ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<OwnPropsType> = (props) =>{\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <div className={s.socialHeader}>\r\n                <img src='https://borutofan.ru/img/jpg/27.jpg'/>\r\n            </div> */}\r\n            <ProfileInfo profile={props.profile} \r\n                status={props.status} \r\n                updateStatus={props.updateStatus} \r\n                isOwner={props.isOwner} \r\n                savePhoto={props.savePhoto}\r\n                saveProfileChanges={props.saveProfileChanges}/>\r\n            <PostsContainer  />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport {getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfileChanges} from '../../Redux/profile-reducer'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\n\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../Redux/redux-store'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype MapStatePropsType = ReturnType <typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateStatus: (status:string) => void \r\n    savePhoto: (file: File) => void \r\n    saveProfileChanges: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string \r\n}\r\ntype AllPropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<AllPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        if (!userId) {\r\n           console.error(\"ID should exists in URI params or State ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getUserStatus(userId);\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n      this.refreshProfile()\r\n       \r\n    }\r\n\r\n    componentDidUpdate(prevProps: AllPropsType, prevState: AllPropsType) {\r\n        if (this.props.match.params.userId !=prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n            } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} \r\n                profile={this.props.profile} \r\n                status={this.props.status} \r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile : state.profilePage.profile,\r\n    status : state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect (mapStateToProps,{getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfileChanges} ),\r\n    withRouter,\r\n    //withAuthRedirect\r\n) (ProfileContainer)\r\n\r\n// let authRedirectContainer = withAuthRedirect(ProfileContainer)\r\n    \r\n\r\n// let WithUrlDataContainerComponent = withRouter(authRedirectContainer)\r\n\r\n// export default connect (mapStateToProps,{getUserProfile} ) (WithUrlDataContainerComponent);\r\n"],"sourceRoot":""}